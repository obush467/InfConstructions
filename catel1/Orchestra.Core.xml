<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Orchestra.Core</name>
    </assembly>
    <members>
        <member name="T:Orchestra.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Orchestra.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Orchestra.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Orchestra.Properties.Resources.Orchestra_AllRightsReserved">
            <summary>
              Looks up a localized string similar to All rights reserved.
            </summary>
        </member>
        <member name="P:Orchestra.Properties.Resources.Orchestra_Assign">
            <summary>
              Looks up a localized string similar to Assign.
            </summary>
        </member>
        <member name="P:Orchestra.Properties.Resources.Orchestra_AssignInputGestureAreYouSure">
            <summary>
              Looks up a localized string similar to Are you sure you want to assign the input gesture to &apos;{0}&apos;. It will be removed from the other commands..
            </summary>
        </member>
        <member name="P:Orchestra.Properties.Resources.Orchestra_AssignInputGestureUsedByFollowCommands">
            <summary>
              Looks up a localized string similar to The input gesture &apos;{0}&apos; is currently being used by the following commands:.
            </summary>
        </member>
        <member name="P:Orchestra.Properties.Resources.Orchestra_BackupAndReset">
            <summary>
              Looks up a localized string similar to Backup and Reset.
            </summary>
        </member>
        <member name="P:Orchestra.Properties.Resources.Orchestra_BackupCreated">
            <summary>
              Looks up a localized string similar to Backup has been succesfully created..
            </summary>
        </member>
        <member name="P:Orchestra.Properties.Resources.Orchestra_BuiltOn">
            <summary>
              Looks up a localized string similar to Built on {0}.
            </summary>
        </member>
        <member name="P:Orchestra.Properties.Resources.Orchestra_Close">
            <summary>
              Looks up a localized string similar to Close.
            </summary>
        </member>
        <member name="P:Orchestra.Properties.Resources.Orchestra_Command">
            <summary>
              Looks up a localized string similar to Command.
            </summary>
        </member>
        <member name="P:Orchestra.Properties.Resources.Orchestra_Continue">
            <summary>
              Looks up a localized string similar to Continue.
            </summary>
        </member>
        <member name="P:Orchestra.Properties.Resources.Orchestra_Copy">
            <summary>
              Looks up a localized string similar to Copy.
            </summary>
        </member>
        <member name="P:Orchestra.Properties.Resources.Orchestra_Customize">
            <summary>
              Looks up a localized string similar to Customize.
            </summary>
        </member>
        <member name="P:Orchestra.Properties.Resources.Orchestra_DebugLoggingIsEnabled">
            <summary>
              Looks up a localized string similar to Debug logging is enabled for this application instance.
            </summary>
        </member>
        <member name="P:Orchestra.Properties.Resources.Orchestra_DeletedUserDataSettings">
            <summary>
              Looks up a localized string similar to User data settings have been successfully deleted..
            </summary>
        </member>
        <member name="P:Orchestra.Properties.Resources.Orchestra_EnableDetailedLogging">
            <summary>
              Looks up a localized string similar to Enable detailed logging.
            </summary>
        </member>
        <member name="P:Orchestra.Properties.Resources.Orchestra_EnableLogging">
            <summary>
              Looks up a localized string similar to Enable logging.
            </summary>
        </member>
        <member name="P:Orchestra.Properties.Resources.Orchestra_FailedToCreateBackup">
            <summary>
              Looks up a localized string similar to Failed to created a backup. To prevent data loss, the application will now exit and not delete any files. Please contact support so they can guide you through the process..
            </summary>
        </member>
        <member name="P:Orchestra.Properties.Resources.Orchestra_InputGesture">
            <summary>
              Looks up a localized string similar to Input gesture.
            </summary>
        </member>
        <member name="P:Orchestra.Properties.Resources.Orchestra_KeyboardShortcuts">
            <summary>
              Looks up a localized string similar to Keyboard shortcuts.
            </summary>
        </member>
        <member name="P:Orchestra.Properties.Resources.Orchestra_NoLogListenerAvailable">
            <summary>
              Looks up a localized string similar to No log listener available that can be opened. Please contact support..
            </summary>
        </member>
        <member name="P:Orchestra.Properties.Resources.Orchestra_NotStartedCorrectly_01">
            <summary>
              Looks up a localized string similar to It seems that the application failed to start correctly the last time it was started..
            </summary>
        </member>
        <member name="P:Orchestra.Properties.Resources.Orchestra_NotStartedCorrectly_02">
            <summary>
              Looks up a localized string similar to If this happens again, try to reset the user data settings. The left button will allow you to reset (and optionally backup) your settings..
            </summary>
        </member>
        <member name="P:Orchestra.Properties.Resources.Orchestra_NotStartedCorrectly_03">
            <summary>
              Looks up a localized string similar to When ready, click continue to start the application..
            </summary>
        </member>
        <member name="P:Orchestra.Properties.Resources.Orchestra_PressShortcutKeys">
            <summary>
              Looks up a localized string similar to Press shortcut keys:.
            </summary>
        </member>
        <member name="P:Orchestra.Properties.Resources.Orchestra_Print">
            <summary>
              Looks up a localized string similar to Print.
            </summary>
        </member>
        <member name="P:Orchestra.Properties.Resources.Orchestra_ProducedBy">
            <summary>
              Looks up a localized string similar to Produced by {0}.
            </summary>
        </member>
        <member name="P:Orchestra.Properties.Resources.Orchestra_ReleasedOn">
            <summary>
              Looks up a localized string similar to Released on.
            </summary>
        </member>
        <member name="P:Orchestra.Properties.Resources.Orchestra_Remove">
            <summary>
              Looks up a localized string similar to Remove.
            </summary>
        </member>
        <member name="P:Orchestra.Properties.Resources.Orchestra_ReplaceInputGesture">
            <summary>
              Looks up a localized string similar to Replace input gesture?.
            </summary>
        </member>
        <member name="P:Orchestra.Properties.Resources.Orchestra_Reset">
            <summary>
              Looks up a localized string similar to Reset.
            </summary>
        </member>
        <member name="P:Orchestra.Properties.Resources.Orchestra_ResetKeyboardShortcutsAreYouSure">
            <summary>
              Looks up a localized string similar to Resetting shortcuts will delete all your current shortcuts. This action cannot be undone. Are you sure you want to reset the shortcuts?.
            </summary>
        </member>
        <member name="P:Orchestra.Properties.Resources.Orchestra_RetrievingSystemInfo">
            <summary>
              Looks up a localized string similar to Retrieving system information....
            </summary>
        </member>
        <member name="P:Orchestra.Properties.Resources.Orchestra_ShortcutForSelectedCommand">
            <summary>
              Looks up a localized string similar to Shortcut for selected command:.
            </summary>
        </member>
        <member name="P:Orchestra.Properties.Resources.Orchestra_ShortcutsForApplication">
            <summary>
              Looks up a localized string similar to Keyboard shortcuts for {0}.
            </summary>
        </member>
        <member name="P:Orchestra.Properties.Resources.Orchestra_ShowCommandsContaining">
            <summary>
              Looks up a localized string similar to Show commands containing:.
            </summary>
        </member>
        <member name="P:Orchestra.Properties.Resources.Orchestra_ShowLog">
            <summary>
              Looks up a localized string similar to Show log....
            </summary>
        </member>
        <member name="P:Orchestra.Properties.Resources.Orchestra_ShowSystemInfo">
            <summary>
              Looks up a localized string similar to Show system info.
            </summary>
        </member>
        <member name="P:Orchestra.Properties.Resources.Orchestra_SystemInfo">
            <summary>
              Looks up a localized string similar to System information.
            </summary>
        </member>
        <member name="P:Orchestra.Properties.Resources.Orchestra_UserDataSettings">
            <summary>
              Looks up a localized string similar to User data settings.
            </summary>
        </member>
        <member name="T:Orchestra.Controls.AnimatingTextBlock">
            <summary>
            Animating text block.
            </summary>
        </member>
        <member name="M:Orchestra.Controls.AnimatingTextBlock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orchestra.Controls.AnimatingTextBlock"/> class.
            </summary>
        </member>
        <member name="P:Orchestra.Controls.AnimatingTextBlock.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="F:Orchestra.Controls.AnimatingTextBlock.TextProperty">
            <summary>
            The text property.
            </summary>
        </member>
        <member name="P:Orchestra.Controls.AnimatingTextBlock.HideStoryboard">
            <summary>
            Gets or sets the hide storyboard.
            </summary>
            <value>The hide storyboard.</value>
        </member>
        <member name="F:Orchestra.Controls.AnimatingTextBlock.HideStoryboardProperty">
            <summary>
            The hide storyboard property.
            </summary>
        </member>
        <member name="P:Orchestra.Controls.AnimatingTextBlock.ShowStoryboard">
            <summary>
            Gets or sets the show storyboard.
            </summary>
            <value>The show storyboard.</value>
        </member>
        <member name="F:Orchestra.Controls.AnimatingTextBlock.ShowStoryboardProperty">
            <summary>
            The show storyboard property.
            </summary>
        </member>
        <member name="M:Orchestra.Controls.AnimatingTextBlock.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.
            </summary>
        </member>
        <member name="M:Orchestra.Controls.AnimatingTextBlock.UpdateStatus(System.String)">
            <summary>
            Updates the status.
            </summary>
            <param name="status">The status.</param>
        </member>
        <member name="T:Orchestra.Controls.BusyIndicator">
            <summary>
            Interaction logic for BusyIndicator.xaml
            </summary>
            <summary>
            BusyIndicator
            </summary>
        </member>
        <member name="M:Orchestra.Controls.BusyIndicator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orchestra.Controls.BusyIndicator"/> class.
            </summary>
        </member>
        <member name="M:Orchestra.Controls.BusyIndicator.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Orchestra.Controls.FluidProgressBar">
            <summary>
            Interaction logic for FluidProgressBar.xaml
            </summary>
            <summary>
            FluidProgressBar
            </summary>
        </member>
        <member name="F:Orchestra.Controls.FluidProgressBar.DelayProperty">
            <summary>
            Delay Dependency Property
            </summary>
        </member>
        <member name="P:Orchestra.Controls.FluidProgressBar.Delay">
            <summary>
            Gets or sets the Delay property. This dependency property 
            indicates the delay between adjacent animation timelines.
            </summary>
        </member>
        <member name="M:Orchestra.Controls.FluidProgressBar.OnDelayChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the Delay property.
            </summary>
            <param name="d">FluidProgressBar</param>
            <param name="e">DependencyProperty changed event arguments</param>
        </member>
        <member name="M:Orchestra.Controls.FluidProgressBar.OnDelayChanged(System.Windows.Duration,System.Windows.Duration)">
            <summary>
            Provides derived classes an opportunity to handle changes to the Delay property.
            </summary>
            <param name="oldDelay">Old Value</param>
            <param name="newDelay">New Value</param>
        </member>
        <member name="F:Orchestra.Controls.FluidProgressBar.DotWidthProperty">
            <summary>
            DotWidth Dependency Property
            </summary>
        </member>
        <member name="P:Orchestra.Controls.FluidProgressBar.DotWidth">
            <summary>
            Gets or sets the DotWidth property. This dependency property 
            indicates the width of each of the dots.
            </summary>
        </member>
        <member name="M:Orchestra.Controls.FluidProgressBar.OnDotWidthChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the DotWidth property.
            </summary>
            <param name="d">FluidProgressBar</param>
            <param name="e">DependencyProperty changed event arguments</param>
        </member>
        <member name="M:Orchestra.Controls.FluidProgressBar.OnDotWidthChanged(System.Double,System.Double)">
            <summary>
            Provides derived classes an opportunity to handle changes to the DotWidth property.
            </summary>
            <param name="oldDotWidth">Old Value</param>
            <param name="newDotWidth">New Value</param>
        </member>
        <member name="F:Orchestra.Controls.FluidProgressBar.DotHeightProperty">
            <summary>
            DotHeight Dependency Property
            </summary>
        </member>
        <member name="P:Orchestra.Controls.FluidProgressBar.DotHeight">
            <summary>
            Gets or sets the DotHeight property. This dependency property 
            indicates the height of each of the dots.
            </summary>
        </member>
        <member name="M:Orchestra.Controls.FluidProgressBar.OnDotHeightChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the DotHeight property.
            </summary>
            <param name="d">FluidProgressBar</param>
            <param name="e">DependencyProperty changed event arguments</param>
        </member>
        <member name="M:Orchestra.Controls.FluidProgressBar.OnDotHeightChanged(System.Double,System.Double)">
            <summary>
            Provides derived classes an opportunity to handle changes to the DotHeight property.
            </summary>
            <param name="oldDotHeight">Old Value</param>
            <param name="newDotHeight">New Value</param>
        </member>
        <member name="F:Orchestra.Controls.FluidProgressBar.DotRadiusXProperty">
            <summary>
            DotRadiusX Dependency Property
            </summary>
        </member>
        <member name="P:Orchestra.Controls.FluidProgressBar.DotRadiusX">
            <summary>
            Gets or sets the DotRadiusX property. This dependency property 
            indicates the corner radius width of each of the dot.
            </summary>
        </member>
        <member name="M:Orchestra.Controls.FluidProgressBar.OnDotRadiusXChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the DotRadiusX property.
            </summary>
            <param name="d">FluidProgressBar</param>
            <param name="e">DependencyProperty changed event arguments</param>
        </member>
        <member name="M:Orchestra.Controls.FluidProgressBar.OnDotRadiusXChanged(System.Double,System.Double)">
            <summary>
            Provides derived classes an opportunity to handle changes to the DotRadiusX property.
            </summary>
            <param name="oldDotRadiusX">Old Value</param>
            <param name="newDotRadiusX">New Value</param>
        </member>
        <member name="F:Orchestra.Controls.FluidProgressBar.DotRadiusYProperty">
            <summary>
            DotRadiusY Dependency Property
            </summary>
        </member>
        <member name="P:Orchestra.Controls.FluidProgressBar.DotRadiusY">
            <summary>
            Gets or sets the DotRadiusY property. This dependency property 
            indicates the corner height of each of the dots.
            </summary>
        </member>
        <member name="M:Orchestra.Controls.FluidProgressBar.OnDotRadiusYChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the DotRadiusY property.
            </summary>
            <param name="d">FluidProgressBar</param>
            <param name="e">DependencyProperty changed event arguments</param>
        </member>
        <member name="M:Orchestra.Controls.FluidProgressBar.OnDotRadiusYChanged(System.Double,System.Double)">
            <summary>
            Provides derived classes an opportunity to handle changes to the DotRadiusY property.
            </summary>
            <param name="oldDotRadiusY">Old Value</param>
            <param name="newDotRadiusY">New Value</param>
        </member>
        <member name="F:Orchestra.Controls.FluidProgressBar.DurationAProperty">
            <summary>
            DurationA Dependency Property
            </summary>
        </member>
        <member name="P:Orchestra.Controls.FluidProgressBar.DurationA">
            <summary>
            Gets or sets the DurationA property. This dependency property 
            indicates the duration of the animation from the start point till KeyFrameA.
            </summary>
        </member>
        <member name="M:Orchestra.Controls.FluidProgressBar.OnDurationAChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the DurationA property.
            </summary>
            <param name="d">FluidProgressBar</param>
            <param name="e">DependencyProperty changed event arguments</param>
        </member>
        <member name="M:Orchestra.Controls.FluidProgressBar.OnDurationAChanged(System.Windows.Duration,System.Windows.Duration)">
            <summary>
            Provides derived classes an opportunity to handle changes to the DurationA property.
            </summary>
            <param name="oldDurationA">Old Value</param>
            <param name="newDurationA">New Value</param>
        </member>
        <member name="F:Orchestra.Controls.FluidProgressBar.DurationBProperty">
            <summary>
            DurationB Dependency Property
            </summary>
        </member>
        <member name="P:Orchestra.Controls.FluidProgressBar.DurationB">
            <summary>
            Gets or sets the DurationB property. This dependency property 
            indicates the duration of the animation from the KeyFrameA till KeyFrameB.
            </summary>
        </member>
        <member name="M:Orchestra.Controls.FluidProgressBar.OnDurationBChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the DurationB property.
            </summary>
            <param name="d">FluidProgressBar</param>
            <param name="e">DependencyProperty changed event arguments</param>
        </member>
        <member name="M:Orchestra.Controls.FluidProgressBar.OnDurationBChanged(System.Windows.Duration,System.Windows.Duration)">
            <summary>
            Provides derived classes an opportunity to handle changes to the DurationB property.
            </summary>
            <param name="oldDurationB">Old Value</param>
            <param name="newDurationB">New Value</param>
        </member>
        <member name="F:Orchestra.Controls.FluidProgressBar.DurationCProperty">
            <summary>
            DurationC Dependency Property
            </summary>
        </member>
        <member name="P:Orchestra.Controls.FluidProgressBar.DurationC">
            <summary>
            Gets or sets the DurationC property. This dependency property 
            indicates the duration of the animation from KeyFrameB till the end point.
            </summary>
        </member>
        <member name="M:Orchestra.Controls.FluidProgressBar.OnDurationCChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the DurationC property.
            </summary>
            <param name="d">FluidProgressBar</param>
            <param name="e">DependencyProperty changed event arguments</param>
        </member>
        <member name="M:Orchestra.Controls.FluidProgressBar.OnDurationCChanged(System.Windows.Duration,System.Windows.Duration)">
            <summary>
            Provides derived classes an opportunity to handle changes to the DurationC property.
            </summary>
            <param name="oldDurationC">Old Value</param>
            <param name="newDurationC">New Value</param>
        </member>
        <member name="F:Orchestra.Controls.FluidProgressBar.KeyFrameAProperty">
            <summary>
            KeyFrameA Dependency Property
            </summary>
        </member>
        <member name="P:Orchestra.Controls.FluidProgressBar.KeyFrameA">
            <summary>
            Gets or sets the KeyFrameA property. This dependency property 
            indicates the first KeyFrame position after the initial keyframe.
            </summary>
        </member>
        <member name="M:Orchestra.Controls.FluidProgressBar.OnKeyFrameAChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the KeyFrameA property.
            </summary>
            <param name="d">FluidProgressBar</param>
            <param name="e">DependencyProperty changed event arguments</param>
        </member>
        <member name="M:Orchestra.Controls.FluidProgressBar.OnKeyFrameAChanged(System.Double,System.Double)">
            <summary>
            Provides derived classes an opportunity to handle changes to the KeyFrameA property.
            </summary>
            <param name="oldKeyFrameA">Old Value</param>
            <param name="newKeyFrameA">New Value</param>
        </member>
        <member name="F:Orchestra.Controls.FluidProgressBar.KeyFrameBProperty">
            <summary>
            KeyFrameB Dependency Property
            </summary>
        </member>
        <member name="P:Orchestra.Controls.FluidProgressBar.KeyFrameB">
            <summary>
            Gets or sets the KeyFrameB property. This dependency property 
            indicates the second KeyFrame position after the initial keyframe.
            </summary>
        </member>
        <member name="M:Orchestra.Controls.FluidProgressBar.OnKeyFrameBChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the KeyFrameB property.
            </summary>
            <param name="d">FluidProgressBar</param>
            <param name="e">DependencyProperty changed event arguments</param>
        </member>
        <member name="M:Orchestra.Controls.FluidProgressBar.OnKeyFrameBChanged(System.Double,System.Double)">
            <summary>
            Provides derived classes an opportunity to handle changes to the KeyFrameB property.
            </summary>
            <param name="oldKeyFrameB">Old Value</param>
            <param name="newKeyFrameB">New Value</param>
        </member>
        <member name="F:Orchestra.Controls.FluidProgressBar.OscillateProperty">
            <summary>
            Oscillate Dependency Property
            </summary>
        </member>
        <member name="P:Orchestra.Controls.FluidProgressBar.Oscillate">
            <summary>
            Gets or sets the Oscillate property. This dependency property 
            indicates whether the animation should oscillate.
            </summary>
        </member>
        <member name="M:Orchestra.Controls.FluidProgressBar.OnOscillateChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the Oscillate property.
            </summary>
            <param name="d">FluidProgressBar</param>
            <param name="e">DependencyProperty changed event arguments</param>
        </member>
        <member name="M:Orchestra.Controls.FluidProgressBar.OnOscillateChanged(System.Boolean,System.Boolean)">
            <summary>
            Provides derived classes an opportunity to handle changes to the Oscillate property.
            </summary>
            <param name="oldOscillate">Old Value</param>
            <param name="newOscillate">New Value</param>
        </member>
        <member name="F:Orchestra.Controls.FluidProgressBar.ReverseDurationProperty">
            <summary>
            ReverseDuration Dependency Property
            </summary>
        </member>
        <member name="P:Orchestra.Controls.FluidProgressBar.ReverseDuration">
            <summary>
            Gets or sets the ReverseDuration property. This dependency property 
            indicates the duration of the total animation in reverse.
            </summary>
        </member>
        <member name="M:Orchestra.Controls.FluidProgressBar.OnReverseDurationChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the ReverseDuration property.
            </summary>
            <param name="d">FluidProgressBar</param>
            <param name="e">DependencyProperty changed event arguments</param>
        </member>
        <member name="M:Orchestra.Controls.FluidProgressBar.OnReverseDurationChanged(System.Windows.Duration,System.Windows.Duration)">
            <summary>
            Provides derived classes an opportunity to handle changes to the ReverseDuration property.
            </summary>
            <param name="oldReverseDuration">Old Value</param>
            <param name="newReverseDuration">New Value</param>
        </member>
        <member name="F:Orchestra.Controls.FluidProgressBar.TotalDurationProperty">
            <summary>
            TotalDuration Dependency Property
            </summary>
        </member>
        <member name="P:Orchestra.Controls.FluidProgressBar.TotalDuration">
            <summary>
            Gets or sets the TotalDuration property. This dependency property 
            indicates the duration of the complete animation.
            </summary>
        </member>
        <member name="M:Orchestra.Controls.FluidProgressBar.OnTotalDurationChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the TotalDuration property.
            </summary>
            <param name="d">FluidProgressBar</param>
            <param name="e">DependencyProperty changed event arguments</param>
        </member>
        <member name="M:Orchestra.Controls.FluidProgressBar.OnTotalDurationChanged(System.Windows.Duration,System.Windows.Duration)">
            <summary>
            Provides derived classes an opportunity to handle changes to the TotalDuration property.
            </summary>
            <param name="oldTotalDuration">Old Value</param>
            <param name="newTotalDuration">New Value</param>
        </member>
        <member name="M:Orchestra.Controls.FluidProgressBar.OnLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Loaded event
            </summary>
            <param name="sender">Sender</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Orchestra.Controls.FluidProgressBar.OnSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Handles the SizeChanged event
            </summary>
            <param name="sender">Sender</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Orchestra.Controls.FluidProgressBar.OnIsVisibleChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles the IsVisibleChanged event
            </summary>
            <param name="sender">Sender</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Orchestra.Controls.FluidProgressBar.StartFluidAnimation">
            <summary>
            Starts the animation
            </summary>
        </member>
        <member name="M:Orchestra.Controls.FluidProgressBar.StopFluidAnimation">
            <summary>
            Stops the animation
            </summary>
        </member>
        <member name="M:Orchestra.Controls.FluidProgressBar.RestartStoryboardAnimation">
            <summary>
            Stops the animation, updates the keyframes and starts the animation
            </summary>
        </member>
        <member name="M:Orchestra.Controls.FluidProgressBar.GetKeyFramesFromStoryboard">
            <summary>
            Obtains the keyframes for each animation in the storyboard so that
            they can be updated when required.
            </summary>
        </member>
        <member name="M:Orchestra.Controls.FluidProgressBar.ProcessDoubleAnimationWithKeys(System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames,System.Boolean)">
            <summary>
            Gets the keyframes in the given animation and stores them in a map
            </summary>
            <param name="dakeys">Animation containg keyframes</param>
            <param name="isOpacityAnim">Flag to indicate whether the animation targets the opacity or the translate transform</param>
        </member>
        <member name="M:Orchestra.Controls.FluidProgressBar.UpdateKeyFrames">
            <summary>
            Update the key value of each keyframe based on the current width of the FluidProgressBar
            </summary>
        </member>
        <member name="M:Orchestra.Controls.FluidProgressBar.UpdateKeyFrame(System.Int32,System.Double)">
            <summary>
            Update the key value of the keyframes stored in the map
            </summary>
            <param name="key">Key of the dictionary</param>
            <param name="newValue">New value to be given to the key value of the keyframes</param>
        </member>
        <member name="M:Orchestra.Controls.FluidProgressBar.UpdateKeyTimes(System.Int32,System.Windows.Duration)">
            <summary>
            Updates the duration of each of the keyframes stored in the map
            </summary>
            <param name="key">Key of the dictionary</param>
            <param name="newDuration">The new duration.</param>
        </member>
        <member name="M:Orchestra.Controls.FluidProgressBar.UpdateKeyTime(System.Int32,System.Windows.Duration)">
            <summary>
            Updates the duration of each of the keyframes stored in the map
            </summary>
            <param name="key">Key of the dictionary</param>
            <param name="newDuration">New value to be given to the duration value of the keyframes</param>
        </member>
        <member name="M:Orchestra.Controls.FluidProgressBar.UpdateOpacityKeyTime(System.Int32,System.Windows.Duration)">
            <summary>
            Updates the duration of the second keyframe of all the opacity animations
            </summary>
            <param name="key">Key of the dictionary</param>
            <param name="newDuration">New value to be given to the duration value of the keyframes</param>
        </member>
        <member name="M:Orchestra.Controls.FluidProgressBar.UpdateTimelineDelay(System.Windows.Duration)">
            <summary>
            Updates the delay between consecutive timelines
            </summary>
            <param name="newDelay">Delay duration</param>
        </member>
        <member name="M:Orchestra.Controls.FluidProgressBar.Dispose">
            <summary>
            Releases all resources used by an instance of the FluidProgressBar class.
            </summary>
            <remarks>
            This method calls the virtual Dispose(bool) method, passing in 'true', and then suppresses 
            finalization of the instance.
            </remarks>
        </member>
        <member name="M:Orchestra.Controls.FluidProgressBar.Finalize">
            <summary>
            Releases unmanaged resources before an instance of the FluidProgressBar class is reclaimed by garbage collection.
            </summary>
            <remarks>
            NOTE: Leave out the finalizer altogether if this class doesn't own unmanaged resources itself, 
            but leave the other methods exactly as they are.
            This method releases unmanaged resources by calling the virtual Dispose(bool), passing in 'false'.
            </remarks>
        </member>
        <member name="M:Orchestra.Controls.FluidProgressBar.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by an instance of the FluidProgressBar class and optionally releases the managed resources.
            </summary>
            <param name="disposing">'true' to release both managed and unmanaged resources; 'false' to release only unmanaged resources.</param>
        </member>
        <member name="M:Orchestra.Controls.FluidProgressBar.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Orchestra.Controls.KeyboardMappingControl">
            <summary>
            Interaction logic for KeyboardMappingControl.xaml
            </summary>
            <summary>
            KeyboardMappingControl
            </summary>
        </member>
        <member name="M:Orchestra.Controls.KeyboardMappingControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Orchestra.Controls.MediaElementThreadFactory">
            <summary>
            Factory that allows the creation of media elements on a worker thread.
            </summary>
        </member>
        <member name="M:Orchestra.Controls.MediaElementThreadFactory.CreateMediaElementsOnWorkerThread(System.Func{System.Windows.Media.Visual})">
            <summary>
            Creates the media element on worker thread.
            <para />
            Note that the <see cref="T:Orchestra.Controls.MediaElementThreadInfo"/> implements <see cref="T:System.IDisposable"/>.
            </summary>
            <returns>The media element thread info.</returns>
        </member>
        <member name="T:Orchestra.Controls.MediaElementThreadInfo">
            <summary>
            Media element thread info.
            </summary>
        </member>
        <member name="M:Orchestra.Controls.MediaElementThreadInfo.#ctor(System.Windows.Media.HostVisual,System.Threading.Thread)">
            <summary>
            Initializes a new instance of the <see cref="T:Orchestra.Controls.MediaElementThreadInfo"/> class.
            </summary>
            <param name="hostVisual">The host visual.</param>
            <param name="thread">The thread.</param>
        </member>
        <member name="P:Orchestra.Controls.MediaElementThreadInfo.Thread">
            <summary>
            Gets the thread that must be killed by the user.
            </summary>
            <value>The thread.</value>
        </member>
        <member name="P:Orchestra.Controls.MediaElementThreadInfo.HostVisual">
            <summary>
            Gets the media element.
            </summary>
            <value>The media element.</value>
        </member>
        <member name="M:Orchestra.Controls.MediaElementThreadInfo.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Orchestra.Controls.VisualTargetPresentationSource">
            <summary>
            Support for multi-threaded host visuals.
            </summary>
            <remarks>
            The original code can be found here: http://blogs.msdn.com/b/dwayneneed/archive/2007/04/26/multithreaded-ui-hostvisual.aspx.
            </remarks>
        </member>
        <member name="M:Orchestra.Controls.VisualTargetPresentationSource.#ctor(System.Windows.Media.HostVisual)">
            <summary>
            Initializes a new instance of the <see cref="T:Orchestra.Controls.VisualTargetPresentationSource"/> class.
            </summary>
            <param name="hostVisual">The host visual.</param>
        </member>
        <member name="P:Orchestra.Controls.VisualTargetPresentationSource.RootVisual">
            <summary>
            When overridden in a derived class, gets or sets the root visual being presented in the source.
            </summary>
            <value></value>
            <returns>
            The root visual.
            </returns>
        </member>
        <member name="P:Orchestra.Controls.VisualTargetPresentationSource.IsDisposed">
            <summary>
            When overridden in a derived class, gets a value that declares whether the object is disposed.
            </summary>
            <value></value>
            <returns>true if the object is disposed; otherwise, false.
            </returns>
        </member>
        <member name="M:Orchestra.Controls.VisualTargetPresentationSource.GetCompositionTargetCore">
            <summary>
            When overridden in a derived class, returns a visual target for the given source.
            </summary>
            <returns>
            Returns a <see cref="T:System.Windows.Media.CompositionTarget"/> that is target for rendering the visual.
            </returns>
        </member>
        <member name="T:Orchestra.Controls.VisualWrapper">
            <summary>
            This visual wrapper is used by VisualTargetPresentationSource
            </summary>
        </member>
        <member name="P:Orchestra.Controls.VisualWrapper.Child">
            <summary>w
            Gets or sets the child.
            </summary>
            <value>The child.</value>
        </member>
        <member name="M:Orchestra.Controls.VisualWrapper.GetVisualChild(System.Int32)">
            <summary>
            Overrides <see cref="M:System.Windows.Media.Visual.GetVisualChild(System.Int32)"/>, and returns a child at the specified index from a collection of child elements.
            </summary>
            <param name="index">The zero-based index of the requested child element in the collection.</param>
            <returns>
            The requested child element. This should not return null; if the provided index is out of range, an exception is thrown.
            </returns>
        </member>
        <member name="P:Orchestra.Controls.VisualWrapper.VisualChildrenCount">
            <summary>
            Gets the number of visual child elements within this element.
            </summary>
            <value></value>
            <returns>
            The number of visual child elements for this element.
            </returns>
        </member>
        <member name="T:Orchestra.Converters.CommandNameToStringConverter">
            <summary>
            Converts a command name to a string.
            </summary>
        </member>
        <member name="M:Orchestra.Converters.CommandNameToStringConverter.Convert(System.Object,System.Type,System.Object)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <returns>The value to be passed to the target dependency property.</returns>
        </member>
        <member name="T:Orchestra.Converters.KeyboardMappingToStringConverter">
            <summary>
            Converts an keyboard mapping to a string.
            </summary>
        </member>
        <member name="M:Orchestra.Converters.KeyboardMappingToStringConverter.Convert(System.Object,System.Type,System.Object)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <returns>The value to be passed to the target dependency property.</returns>
        </member>
        <member name="T:Orchestra.Converters.InputGestureToStringConverter">
            <summary>
            Converts an input gesture to a string.
            </summary>
        </member>
        <member name="M:Orchestra.Converters.InputGestureToStringConverter.Convert(System.Object,System.Type,System.Object)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <returns>The value to be passed to the target dependency property.</returns>
        </member>
        <member name="T:Orchestra.Converters.PathToStringConverter">
            <summary>
            Converts a path to a string.
            </summary>
        </member>
        <member name="M:Orchestra.Converters.PathToStringConverter.Convert(System.String,System.Type,System.Object)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <returns>The value to be passed to the target dependency property.</returns>
        </member>
        <member name="T:Orchestra.OrchestraException">
            <summary>
            Custom exception in Orchestra.
            </summary>
        </member>
        <member name="M:Orchestra.OrchestraException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orchestra.OrchestraException" /> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Orchestra.OrchestraException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Orchestra.OrchestraException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Orchestra.DependencyObjectExtensions.GetParentWindow(System.Windows.DependencyObject)">
            <summary>
            Get the parent window for this visual object or null when not exists.
            </summary>
            <param name="visualObject">Reference to visual object.</param>
            <returns>Reference to partent window or null when not exists.</returns>
        </member>
        <member name="T:Orchestra.StringExtensions">
            <summary>
            Extension methods for strings.
            </summary>
        </member>
        <member name="M:Orchestra.StringExtensions.GetCommandGroup(System.String)">
            <summary>
            Gets the command group from the command name.
            </summary>
            <param name="commandName">Name of the command.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Orchestra.StringExtensions.GetCommandName(System.String)">
            <summary>
            Gets the name of the command from the command name.
            </summary>
            <param name="commandName">Name of the command.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Orchestra.WindowExtensions.BringWindowToTop(System.Windows.FrameworkElement)">
            <summary>
            Activates the window this framework element contains to.
            </summary>
            <param name="frameworkElement">Reference to the current <see cref="T:System.Windows.FrameworkElement"/>.</param>
        </member>
        <member name="M:Orchestra.WindowExtensions.SetForegroundWindowEx(System.IntPtr)">
            <summary>
            Sets the foreground window (some "dirty" win32 stuff).
            </summary>
            <param name="hWnd">Handle of the window to set to the front.</param>
            <remarks>
            This method takes over the input thread for the window. This means that you are unable
            to debug the code between "Attach" and "Detach" since the input thread of Visual Studio
            will be attached to the thread of the application.
            </remarks>
        </member>
        <member name="T:Orchestra.AssemblyHelper">
            <summary>
            Assembly helper class.
            </summary>
        </member>
        <member name="M:Orchestra.AssemblyHelper.GetEntryAssembly">
            <summary>
            Gets the entry assembly.
            </summary>
            <returns>Assembly.</returns>
        </member>
        <member name="T:Orchestra.DotNetPatchHelper">
            <summary>
            Class that makes sure to inform the user if a bug occurs due to a missing .net patch.
            </summary>
        </member>
        <member name="M:Orchestra.DotNetPatchHelper.Initialize">
            <summary>
            Initializes the patch helper.
            </summary>
        </member>
        <member name="P:Orchestra.IconHelper.IconExtractor.FileName">
            <summary>
            Gets the full path of the associated file.
            </summary>
        </member>
        <member name="P:Orchestra.IconHelper.IconExtractor.Count">
            <summary>
            Gets the count of the icons in the associated file.
            </summary>
        </member>
        <member name="M:Orchestra.IconHelper.IconExtractor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the IconExtractor class from the specified file name.
            </summary>
            <param name="fileName">The file to extract icons from.</param>
        </member>
        <member name="M:Orchestra.IconHelper.IconExtractor.GetIcon(System.Int32)">
            <summary>
            Extracts an icon from the file.
            </summary>
            <param name="index">Zero based index of the icon to be extracted.</param>
            <returns>A System.Drawing.Icon object.</returns>
            <remarks>Always returns new copy of the Icon. It should be disposed by the user.</remarks>
        </member>
        <member name="M:Orchestra.IconHelper.IconExtractor.GetAllIcons">
            <summary>
            Extracts all the icons from the file.
            </summary>
            <returns>An array of System.Drawing.Icon objects.</returns>
            <remarks>Always returns new copies of the Icons. They should be disposed by the user.</remarks>
        </member>
        <member name="F:Orchestra.LogFilePrefixes.Crashreport">
            <summary>
            The crashreport prefix.
            </summary>
        </member>
        <member name="F:Orchestra.LogFilePrefixes.EntryAssemblyName">
            <summary>
            The entry assembly name prefix.
            </summary>
        </member>
        <member name="F:Orchestra.LogFilePrefixes.Log">
            <summary>
            The 'Log' file log prefix.
            </summary>
        </member>
        <member name="F:Orchestra.LogFilePrefixes.All">
            <summary>
            All file log prefixes
            </summary>
        </member>
        <member name="T:Orchestra.LogHelper">
            <summary>
            Helper class for logging.
            </summary>
        </member>
        <member name="M:Orchestra.LogHelper.AddFileLogListener">
            <summary>
            Adds a file log listener.
            </summary>
        </member>
        <member name="M:Orchestra.LogHelper.AddLogListenerForUnhandledException(System.Exception)">
            <summary>
            Adds a file log listener for an unhandled exception.
            </summary>
            <param name="ex">The unhandled exception.</param>
        </member>
        <member name="T:Orchestra.PixelShaderMode">
            <summary>
            Sets the available pixel shader modes of Catel.
            </summary>
        </member>
        <member name="F:Orchestra.PixelShaderMode.Off">
            <summary>
            Disable all pixel shaders.
            </summary>
        </member>
        <member name="F:Orchestra.PixelShaderMode.Auto">
            <summary>
            Automatically determine the best option.
            </summary>
        </member>
        <member name="F:Orchestra.PixelShaderMode.Hardware">
            <summary>
            Use hardware for the pixel shaders.
            </summary>
        </member>
        <member name="F:Orchestra.PixelShaderMode.Software">
            <summary>
            Use software for the pixel shaders.
            </summary>
        </member>
        <member name="T:Orchestra.StyleHelper">
            <summary>
            Helper class for WPF styles and themes.
            </summary>
        </member>
        <member name="F:Orchestra.StyleHelper.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="F:Orchestra.StyleHelper.PixelShaderMode">
            <summary>
            This property allows you to disable all pixel shaders in Catel.
            <para />
            By default, all pixel shaders are enabled.
            </summary>
        </member>
        <member name="P:Orchestra.StyleHelper.IsStyleForwardingEnabled">
            <summary>
            Gets or sets a value indicating whether style forwarding is enabled. Style forwarding can be
            enabled by calling one of the <see cref="M:Orchestra.StyleHelper.CreateStyleForwardersForDefaultStyles(System.String)"/> overloads.
            </summary>
            <value>
            	<c>true</c> if this instance is style forwarding enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Orchestra.StyleHelper.EnsureApplicationResourcesAndCreateStyleForwarders(System.Uri,System.String)">
            <summary>
            Ensures that an application instance exists and the styles are applied to the application. This method is extremely useful
            to apply when WPF is hosted (for example, when loaded as plugin of a non-WPF application).
            </summary>
            <param name="applicationResourceDictionary">The application resource dictionary.</param>
            <param name="defaultPrefix">The default prefix, uses to determine the styles as base for other styles.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="applicationResourceDictionary"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="defaultPrefix"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Orchestra.StyleHelper.CreateStyleForwardersForDefaultStyles(System.String)">
            <summary>
            Creates style forwarders for default styles. This means that all styles found in the theme that are
            name like Default[CONTROLNAME]Style (i.e. "DefaultButtonStyle") will be used as default style for the
            control.
            This method will use the current application to retrieve the resources. The forwarders will be written to the same dictionary.
            </summary>
            <param name="defaultPrefix">The default prefix, uses to determine the styles as base for other styles.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="defaultPrefix"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Orchestra.StyleHelper.CreateStyleForwardersForDefaultStyles(System.Windows.ResourceDictionary,System.String)">
            <summary>
            Creates style forwarders for default styles. This means that all styles found in the theme that are
            name like Default[CONTROLNAME]Style (i.e. "DefaultButtonStyle") will be used as default style for the
            control.
            This method will use the passed resources, but the forwarders will be written to the same dictionary as
            the source dictionary.
            </summary>
            <param name="sourceResources">Resource dictionary to read the keys from (thus that contains the default styles).</param>
            <param name="defaultPrefix">The default prefix, uses to determine the styles as base for other styles.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="sourceResources"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="defaultPrefix"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Orchestra.StyleHelper.CreateStyleForwardersForDefaultStyles(System.Windows.ResourceDictionary,System.Windows.ResourceDictionary,System.String)">
            <summary>
            Creates style forwarders for default styles. This means that all styles found in the theme that are
            name like Default[CONTROLNAME]Style (i.e. "DefaultButtonStyle") will be used as default style for the
            control.
            <para/>
            This method will use the passed resources.
            </summary>
            <param name="sourceResources">Resource dictionary to read the keys from (thus that contains the default styles).</param>
            <param name="targetResources">Resource dictionary where the forwarders will be written to.</param>
            <param name="defaultPrefix">The default prefix, uses to determine the styles as base for other styles.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="sourceResources"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetResources"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="defaultPrefix"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Orchestra.StyleHelper.CreateStyleForwardersForDefaultStyles(System.Windows.ResourceDictionary,System.Windows.ResourceDictionary,System.Windows.ResourceDictionary,System.Boolean,System.String,System.Boolean)">
            <summary>
            Creates style forwarders for default styles. This means that all styles found in the theme that are
            name like Default[CONTROLNAME]Style (i.e. "DefaultButtonStyle") will be used as default style for the
            control.
            This method will use the passed resources.
            </summary>
            <param name="rootResourceDictionary">The root resource dictionary.</param>
            <param name="sourceResources">Resource dictionary to read the keys from (thus that contains the default styles).</param>
            <param name="targetResources">Resource dictionary where the forwarders will be written to.</param>
            <param name="forceForwarders">if set to <c>true</c>, styles will not be completed but only forwarders are created.</param>
            <param name="defaultPrefix">The default prefix, uses to determine the styles as base for other styles.</param>
            <param name="recreateStylesBasedOnTheme">if set to <c>true</c>, the styles will be recreated with BasedOn on the current theme.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="rootResourceDictionary" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="sourceResources" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetResources" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="defaultPrefix" /> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Orchestra.StyleHelper.FindResourceDictionaryDeclaringType(System.Windows.ResourceDictionary,System.Type)">
            <summary>
            Finds the <see cref="T:System.Windows.ResourceDictionary"/> declaring the real style for the target type.
            </summary>
            <param name="rootResourceDictionary">The root resource dictionary.</param>
            <param name="targetType">Type of the target.</param>
            <returns><see cref="T:System.Windows.ResourceDictionary"/> in which the style is defined, or <c>null</c> if not found.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="rootResourceDictionary"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetType"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Orchestra.StyleHelper.FindDefaultStyles(System.Windows.ResourceDictionary,System.String)">
            <summary>
            Finds all the the default styles definitions
            </summary>
            <param name="sourceResources">The source resources.</param>
            <param name="defaultPrefix">The default prefix.</param>
            <returns>An enumerable of default styles.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="sourceResources"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="defaultPrefix"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Orchestra.StyleHelper.CompleteStyleWithAdditionalInfo(System.Windows.Style,System.Windows.Style)">
            <summary>
            Completes a style with additional info.
            </summary>
            <param name="style">The style.</param>
            <param name="styleWithAdditionalInfo">The style with additional info.</param>
            <returns>New completed style.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="style"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="styleWithAdditionalInfo"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Orchestra.StyleHelper.RecreateDefaultStylesBasedOnTheme(System.Windows.ResourceDictionary,System.Windows.ResourceDictionary,System.String)">
            <summary>
            Recreates the default styles based on theme.
            </summary>
            <param name="rootResourceDictionary">The root resource dictionary.</param>
            <param name="resources">The resources to fix.</param>
            <param name="defaultPrefix">The default prefix.</param>
            <remarks>
            This method is introduced due to the lack of the ability to use DynamicResource for the BasedOn property when
            defining styles inside a derived theme.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="rootResourceDictionary"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="resources"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="defaultPrefix"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Orchestra.StyleHelper.CloneStyleIfBasedOnControl(System.Windows.ResourceDictionary,System.Windows.Style,System.Type)">
            <summary>
            Clones a style when the style is based on a control.
            </summary>
            <param name="rootResourceDictionary">The root resource dictionary.</param>
            <param name="style">The style.</param>
            <param name="basedOnType">Type which the style is based on.</param>
            <returns><see cref="T:System.Windows.Style"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="rootResourceDictionary"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="style"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="basedOnType"/> is <c>null</c>.</exception>
            <remarks>
            This method is introduced due to the lack of the ability to use DynamicResource for the BasedOn property when
            defining styles inside a derived theme.
            <para />
            Should be used in combination with the <c>RecreateDefaultStylesBasedOnTheme</c> method.
            </remarks>
        </member>
        <member name="F:Orchestra.StyleHelper.DefaultKeyPrefix">
            <summary>
            Prefix of a default style key.
            </summary>
        </member>
        <member name="F:Orchestra.StyleHelper.DefaultKeyPostfix">
            <summary>
            Postfix of a default style key.
            </summary>
        </member>
        <member name="F:Orchestra.StyleHelper._resourceDictionaryCache">
            <summary>
            Cached decompiled XAML resource dictionaries.
            </summary>
        </member>
        <member name="F:Orchestra.StyleHelper._styleToFrameworkElementTypeCache">
            <summary>
            Cached types of <see cref="T:System.Windows.FrameworkElement"/> belonging to the string representation of the type.
            </summary>
        </member>
        <member name="M:Orchestra.StyleHelper.FindFrameworkElementStyleIsBasedOn(System.Uri,System.String)">
            <summary>
            Finds the <see cref="T:System.Windows.FrameworkElement"/> a specific style is based on.
            </summary>
            <param name="resourceDictionaryUri">The resource dictionary URI.</param>
            <param name="styleKey">The style key.</param>
            <returns>
            <see cref="T:System.Type"/> or <c>null</c> if the style is not based on a <see cref="T:System.Windows.FrameworkElement"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="resourceDictionaryUri"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="styleKey"/> is <c>null</c>.</exception>
            <remarks>
            This method is introduced due to the lack of the ability to use DynamicResource for the BasedOn property when
            defining styles inside a derived theme.
            Should be used in combination with the <see cref="M:Orchestra.StyleHelper.RecreateDefaultStylesBasedOnTheme(System.Windows.ResourceDictionary,System.Windows.ResourceDictionary,System.String)"/> method.
            </remarks>
        </member>
        <member name="F:Orchestra.ThemeHelper.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Orchestra.ThemeHelper.GetAccentColorResourceDictionary">
            <summary>
            Gets the accent color resource dictionary if it has been created.
            </summary>
            <returns>ResourceDictionary.</returns>
        </member>
        <member name="M:Orchestra.ThemeHelper.CreateAccentColorResourceDictionary(System.Windows.Media.Color)">
            <summary>
            Creates the accent color resource dictionary and automatically adds it to the application resources.
            </summary>
            <returns>ResourceDictionary.</returns>
        </member>
        <member name="M:Orchestra.ThemeHelper.EnsureApplicationThemes(System.Reflection.Assembly,System.Boolean)">
            <summary>
            Ensures the application themes by using the assembly and the <c>/Themes/Generic.xaml</c>.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="createStyleForwarders">if set to <c>true</c>, style forwarders will be created.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="assembly" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Orchestra.ThemeHelper.EnsureApplicationThemes(System.String,System.Boolean)">
            <summary>
            Ensures the application themes.
            </summary>
            <param name="resourceDictionaryUri">The resource dictionary.</param>
            <param name="createStyleForwarders">if set to <c>true</c>, style forwarders will be created.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="resourceDictionaryUri" /> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Orchestra.ThemeHelper.EnsureOrchestraTheme(System.Boolean)">
            <summary>
            Ensures the orchestra theme.
            </summary>
            <param name="createStyleForwarders">if set to <c>true</c>, create style forwarders.</param>
        </member>
        <member name="M:Orchestra.VersionHelper.GetCurrentVersion(System.Reflection.Assembly)">
            <summary>
            Gets the current version of the specified assembly.
            </summary>
            <param name="assembly">The assembly. If <c>null</c>, <see cref="M:Orchestra.AssemblyHelper.GetEntryAssembly"/> will be used.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:Orchestra.Logging.FileLogListener">
            <summary>
            Special purpose file logger that also writes Catel argument logging. 
            <remarks>
            Will be used until Catel 5.0 has been released where it will always include argument logging, even when Catel logging is being ignored.
            </remarks>
            </summary>
        </member>
        <member name="T:Orchestra.Logging.StatusLogListener">
            <summary>
            Status log listener.
            </summary>
        </member>
        <member name="M:Orchestra.Logging.StatusLogListener.#ctor(Orchestra.Services.IStatusService)">
            <summary>
            Initializes a new instance of the <see cref="T:Orchestra.Logging.StatusLogListener"/> class.
            </summary>
            <param name="statusService">The status service.</param>
        </member>
        <member name="T:Orchestra.Markup.CanvasViewbox">
            <summary>
            Markup extension that can show a canvas inside a viewbox.
            </summary>
        </member>
        <member name="P:Orchestra.Markup.CanvasViewbox.Foreground">
            <summary>
            Gets or sets the foreground. If the foreground is <see cref="P:System.Windows.Media.Brushes.Transparent"/> (default value), it will
            respect the colors of the canvas.
            <para />
            If this property has a different value, this markup extension will overwrite all the fill colors
            of the canvas paths.
            </summary>
        </member>
        <member name="P:Orchestra.Markup.CanvasViewbox.PathName">
            <summary>
            Gets or sets the name of the canvas as it can be found in the application resources.
            </summary>
        </member>
        <member name="T:Orchestra.Markup.FontImage">
            <summary>
            Markup extension that can show a font as image.
            </summary>
            <remarks>
            Original idea comes from http://www.codeproject.com/Tips/634540/Using-Font-Icons
            </remarks>
        </member>
        <member name="M:Orchestra.Markup.FontImage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orchestra.Markup.FontImage"/> class.
            </summary>
        </member>
        <member name="M:Orchestra.Markup.FontImage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orchestra.Markup.FontImage" /> class.
            </summary>
            <param name="itemName">Name of the resource.</param>
        </member>
        <member name="P:Orchestra.Markup.FontImage.DefaultFontFamily">
            <summary>
            Gets or sets the default name of the font.
            </summary>
            <value>The default name of the font.</value>
        </member>
        <member name="P:Orchestra.Markup.FontImage.DefaultBrush">
            <summary>
            Gets or sets the default brush.
            </summary>
            <value>The default brush.</value>
        </member>
        <member name="P:Orchestra.Markup.FontImage.FontFamily">
            <summary>
            Gets the font family.
            </summary>
            <value>The font family.</value>
        </member>
        <member name="P:Orchestra.Markup.FontImage.Brush">
            <summary>
            Gets or sets the brush.
            </summary>
            <value>The brush.</value>
        </member>
        <member name="P:Orchestra.Markup.FontImage.ItemName">
            <summary>
            Gets or sets the font item name.
            </summary>
            <value>The font item name.</value>
        </member>
        <member name="T:Orchestra.StylesExplorer.MarkupReflection.BamlFile">
            <summary>
            Rappresenta un singole file Baml all'interno di un assembly
            </summary>
        </member>
        <member name="M:Orchestra.StylesExplorer.MarkupReflection.BamlFile.LoadContent">
            <summary>
            Carica il Baml attraverso il motore di WPF con Application.LoadComponent
            </summary>
            <returns></returns>
        </member>
        <member name="P:Orchestra.StylesExplorer.MarkupReflection.BamlFile.Stream">
            <summary>
            Restituisce lo stream originale contenente il Baml
            </summary>
        </member>
        <member name="P:Orchestra.StylesExplorer.MarkupReflection.BamlFile.Uri">
            <summary>
            Restituisce l'indirizzo secondo lo schema pack://
            </summary>
        </member>
        <member name="T:Orchestra.StylesExplorer.MarkupReflection.IType">
            <summary>
            Interface rappresenting a DotNet type
            </summary>
        </member>
        <member name="M:Orchestra.StylesExplorer.MarkupReflection.XmlBamlReader.GetAttribute(System.String)">
            <summary>
            When overridden in a derived class, gets the value of the attribute with the specified <see cref="P:System.Xml.XmlReader.Name"></see>.
            </summary>
            
            <returns>
            The value of the specified attribute. If the attribute is not found, null is returned.
            </returns>
            
            <param name="name">The qualified name of the attribute. </param>
        </member>
        <member name="M:Orchestra.StylesExplorer.MarkupReflection.XmlBamlReader.GetAttribute(System.String,System.String)">
            <summary>
            When overridden in a derived class, gets the value of the attribute with the specified <see cref="P:System.Xml.XmlReader.LocalName"></see> and <see cref="P:System.Xml.XmlReader.NamespaceURI"></see>.
            </summary>
            
            <returns>
            The value of the specified attribute. If the attribute is not found, null is returned. This method does not move the reader.
            </returns>
            
            <param name="namespaceURI">The namespace URI of the attribute. </param>
            <param name="name">The local name of the attribute. </param>
        </member>
        <member name="M:Orchestra.StylesExplorer.MarkupReflection.XmlBamlReader.GetAttribute(System.Int32)">
            <summary>
            When overridden in a derived class, gets the value of the attribute with the specified index.
            </summary>
            
            <returns>
            The value of the specified attribute. This method does not move the reader.
            </returns>
            
            <param name="i">The index of the attribute. The index is zero-based. (The first attribute has index 0.) </param>
        </member>
        <member name="M:Orchestra.StylesExplorer.MarkupReflection.XmlBamlReader.MoveToAttribute(System.String)">
            <summary>
            When overridden in a derived class, moves to the attribute with the specified <see cref="P:System.Xml.XmlReader.Name"></see>.
            </summary>
            
            <returns>
            true if the attribute is found; otherwise, false. If false, the reader's position does not change.
            </returns>
            
            <param name="name">The qualified name of the attribute. </param>
        </member>
        <member name="M:Orchestra.StylesExplorer.MarkupReflection.XmlBamlReader.MoveToAttribute(System.String,System.String)">
            <summary>
            When overridden in a derived class, moves to the attribute with the specified <see cref="P:System.Xml.XmlReader.LocalName"></see> and <see cref="P:System.Xml.XmlReader.NamespaceURI"></see>.
            </summary>
            
            <returns>
            true if the attribute is found; otherwise, false. If false, the reader's position does not change.
            </returns>
            
            <param name="name">The local name of the attribute. </param>
            <param name="ns">The namespace URI of the attribute. </param>
        </member>
        <member name="M:Orchestra.StylesExplorer.MarkupReflection.XmlBamlReader.MoveToFirstAttribute">
            <summary>
            When overridden in a derived class, moves to the first attribute.
            </summary>
            
            <returns>
            true if an attribute exists (the reader moves to the first attribute); otherwise, false (the position of the reader does not change).
            </returns>
            
        </member>
        <member name="M:Orchestra.StylesExplorer.MarkupReflection.XmlBamlReader.MoveToNextAttribute">
            <summary>
            When overridden in a derived class, moves to the next attribute.
            </summary>
            
            <returns>
            true if there is a next attribute; false if there are no more attributes.
            </returns>
            
        </member>
        <member name="M:Orchestra.StylesExplorer.MarkupReflection.XmlBamlReader.MoveToElement">
            <summary>
            When overridden in a derived class, moves to the element that contains the current attribute node.
            </summary>
            
            <returns>
            true if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); false if the reader is not positioned on an attribute (the position of the reader does not change).
            </returns>
            
        </member>
        <member name="M:Orchestra.StylesExplorer.MarkupReflection.XmlBamlReader.ReadAttributeValue">
            <summary>
            When overridden in a derived class, parses the attribute value into one or more Text, EntityReference, or EndEntity nodes.
            </summary>
            
            <returns>
            true if there are nodes to return.false if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.An empty attribute, such as, misc="", returns true with a single node with a value of String.Empty.
            </returns>
            
        </member>
        <member name="M:Orchestra.StylesExplorer.MarkupReflection.XmlBamlReader.Read">
            <summary>
            When overridden in a derived class, reads the next node from the stream.
            </summary>
            
            <returns>
            true if the next node was read successfully; false if there are no more nodes to read.
            </returns>
            
            <exception cref="T:System.Xml.XmlException">An error occurred while parsing the XML. </exception>
        </member>
        <member name="M:Orchestra.StylesExplorer.MarkupReflection.XmlBamlReader.Close">
            <summary>
            When overridden in a derived class, changes the <see cref="P:System.Xml.XmlReader.ReadState"></see> to Closed.
            </summary>
            
        </member>
        <member name="M:Orchestra.StylesExplorer.MarkupReflection.XmlBamlReader.LookupNamespace(System.String)">
            <summary>
            When overridden in a derived class, resolves a namespace prefix in the current element's scope.
            </summary>
            
            <returns>
            The namespace URI to which the prefix maps or null if no matching prefix is found.
            </returns>
            
            <param name="prefix">The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string. </param>
        </member>
        <member name="M:Orchestra.StylesExplorer.MarkupReflection.XmlBamlReader.ResolveEntity">
            <summary>
            When overridden in a derived class, resolves the entity reference for EntityReference nodes.
            </summary>
            
            <exception cref="T:System.InvalidOperationException">The reader is not positioned on an EntityReference node; this implementation of the reader cannot resolve entities (<see cref="P:System.Xml.XmlReader.CanResolveEntity"></see> returns false). </exception>
        </member>
        <member name="P:Orchestra.StylesExplorer.MarkupReflection.XmlBamlReader.NodeType">
            <summary>
            When overridden in a derived class, gets the type of the current node.
            </summary>
            
            <returns>
            One of the <see cref="T:System.Xml.XmlNodeType"></see> values representing the type of the current node.
            </returns>
            
        </member>
        <member name="P:Orchestra.StylesExplorer.MarkupReflection.XmlBamlReader.LocalName">
            <summary>
            When overridden in a derived class, gets the local name of the current node.
            </summary>
            
            <returns>
            The name of the current node with the prefix removed. For example, LocalName is book for the element &lt;bk:book&gt;.For node types that do not have a name (like Text, Comment, and so on), this property returns String.Empty.
            </returns>
            
        </member>
        <member name="P:Orchestra.StylesExplorer.MarkupReflection.XmlBamlReader.NamespaceURI">
            <summary>
            When overridden in a derived class, gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.
            </summary>
            
            <returns>
            The namespace URI of the current node; otherwise an empty string.
            </returns>
            
        </member>
        <member name="P:Orchestra.StylesExplorer.MarkupReflection.XmlBamlReader.Prefix">
            <summary>
            When overridden in a derived class, gets the namespace prefix associated with the current node.
            </summary>
            
            <returns>
            The namespace prefix associated with the current node.
            </returns>
            
        </member>
        <member name="P:Orchestra.StylesExplorer.MarkupReflection.XmlBamlReader.HasValue">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current node can have a <see cref="P:System.Xml.XmlReader.Value"></see>.
            </summary>
            
            <returns>
            true if the node on which the reader is currently positioned can have a Value; otherwise, false. If false, the node has a value of String.Empty.
            </returns>
            
        </member>
        <member name="P:Orchestra.StylesExplorer.MarkupReflection.XmlBamlReader.Resolver">
            <summary>
            Returns object used to resolve types
            </summary>
        </member>
        <member name="P:Orchestra.StylesExplorer.MarkupReflection.XmlBamlReader.Value">
            <summary>
            When overridden in a derived class, gets the text value of the current node.
            </summary>
            
            <returns>
            The value returned depends on the <see cref="P:System.Xml.XmlReader.NodeType"></see> of the node. The following table lists node types that have a value to return. All other node types return String.Empty.Node type Value AttributeThe value of the attribute. CDATAThe content of the CDATA section. CommentThe content of the comment. DocumentTypeThe internal subset. ProcessingInstructionThe entire content, excluding the target. SignificantWhitespaceThe white space between markup in a mixed content model. TextThe content of the text node. WhitespaceThe white space between markup. XmlDeclarationThe content of the declaration. 
            </returns>
            
        </member>
        <member name="P:Orchestra.StylesExplorer.MarkupReflection.XmlBamlReader.RootNamespaces">
            <summary>
            Return root namespaces
            </summary>
        </member>
        <member name="P:Orchestra.StylesExplorer.MarkupReflection.XmlBamlReader.Depth">
            <summary>
            When overridden in a derived class, gets the depth of the current node in the XML document.
            </summary>
            
            <returns>
            The depth of the current node in the XML document.
            </returns>
            
        </member>
        <member name="P:Orchestra.StylesExplorer.MarkupReflection.XmlBamlReader.BaseURI">
            <summary>
            When overridden in a derived class, gets the base URI of the current node.
            </summary>
            
            <returns>
            The base URI of the current node.
            </returns>
            
        </member>
        <member name="P:Orchestra.StylesExplorer.MarkupReflection.XmlBamlReader.IsEmptyElement">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current node is an empty element (for example, &lt;MyElement/&gt;).
            </summary>
            
            <returns>
            true if the current node is an element (<see cref="P:System.Xml.XmlReader.NodeType"></see> equals XmlNodeType.Element) that ends with /&gt;; otherwise, false.
            </returns>
            
        </member>
        <member name="P:Orchestra.StylesExplorer.MarkupReflection.XmlBamlReader.AttributeCount">
            <summary>
            When overridden in a derived class, gets the number of attributes on the current node.
            </summary>
            
            <returns>
            The number of attributes on the current node.
            </returns>
            
        </member>
        <member name="P:Orchestra.StylesExplorer.MarkupReflection.XmlBamlReader.EOF">
            <summary>
            When overridden in a derived class, gets a value indicating whether the reader is positioned at the end of the stream.
            </summary>
            
            <returns>
            true if the reader is positioned at the end of the stream; otherwise, false.
            </returns>
            
        </member>
        <member name="P:Orchestra.StylesExplorer.MarkupReflection.XmlBamlReader.ReadState">
            <summary>
            When overridden in a derived class, gets the state of the reader.
            </summary>
            
            <returns>
            One of the <see cref="T:System.Xml.ReadState"></see> values.
            </returns>
            
        </member>
        <member name="P:Orchestra.StylesExplorer.MarkupReflection.XmlBamlReader.NameTable">
            <summary>
            When overridden in a derived class, gets the <see cref="T:System.Xml.XmlNameTable"></see> associated with this implementation.
            </summary>
            
            <returns>
            The XmlNameTable enabling you to get the atomized version of a string within the node.
            </returns>
            
        </member>
        <member name="M:Orchestra.StylesExplorer.MarkupReflection.XmlBamlReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
            <summary>
            Gets a collection of defined prefix-namespace Mappings that are currently in scope.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IDictionary"></see> that contains the current in-scope namespaces.
            </returns>
            
            <param name="scope">An <see cref="T:System.Xml.XmlNamespaceScope"></see> value that specifies the type of namespace nodes to return.</param>
        </member>
        <member name="M:Orchestra.StylesExplorer.MarkupReflection.XmlBamlReader.System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)">
            <summary>
            Gets the namespace URI mapped to the specified prefix.
            </summary>
            
            <returns>
            The namespace URI that is mapped to the prefix; null if the prefix is not mapped to a namespace URI.
            </returns>
            
            <param name="prefix">The prefix whose namespace URI you wish to find.</param>
        </member>
        <member name="M:Orchestra.StylesExplorer.MarkupReflection.XmlBamlReader.System#Xml#IXmlNamespaceResolver#LookupPrefix(System.String)">
            <summary>
            Gets the prefix that is mapped to the specified namespace URI.
            </summary>
            
            <returns>
            The prefix that is mapped to the namespace URI; null if the namespace URI is not mapped to a prefix.
            </returns>
            
            <param name="namespaceName">The namespace URI whose prefix you wish to find.</param>
        </member>
        <member name="T:Orchestra.StylesExplorer.MarkupReflection.XmlPIMapping">
            <summary>
            Rappresenta la mappatura tra namespace XML e namespace CLR con relativo assembly
            </summary>
        </member>
        <member name="P:Orchestra.StylesExplorer.MarkupReflection.XmlPIMapping.XmlNamespace">
            <summary>
            Restituisce o imposta il namespace XML
            </summary>
        </member>
        <member name="P:Orchestra.StylesExplorer.MarkupReflection.XmlPIMapping.AssemblyId">
            <summary>
            Restituisce l'id dell'assembly
            </summary>
        </member>
        <member name="P:Orchestra.StylesExplorer.MarkupReflection.XmlPIMapping.ClrNamespace">
            <summary>
            Restituisce il namespace clr
            </summary>
        </member>
        <member name="P:Orchestra.StylesExplorer.MarkupReflection.XmlPIMapping.Presentation">
            <summary>
            Restituisce il mapping di default di WPF
            </summary>
        </member>
        <member name="M:Orchestra.Models.AboutInfo.#ctor(System.Uri,System.String,Orchestra.Models.UriInfo,System.Reflection.Assembly,System.Uri,System.Windows.Media.Imaging.BitmapSource,System.Nullable{System.DateTime},System.String,System.String,System.Uri,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Orchestra.Models.AboutInfo" /> class.
            </summary>
            <param name="companyLogoForSplashScreenUri"></param>
            <param name="companyLogoUri">The company logo image Uri.</param>
            <param name="logoImageSource">The logo image source.</param>
            <param name="uriInfo">The uri info. Can be <c>null</c>.</param>
            <param name="assembly">The assembly to use for the information. If <c>null</c>, the assembly will be determined automatically.</param>
            <param name="appIcon">The application icon. Can be <c>null</c>. If <c>null</c> then value will be picked from assembly.</param>
            <param name="buildDateTime">The application build datetime. Can be <c>null</c>. If <c>null</c> then value will be picked from assembly.</param>
            <param name="company">The application company. Can be <c>null</c>. If <c>null</c> then value will be picked from assembly.</param>
            <param name="copyright">The application copyright. Can be <c>null</c>. If <c>null</c> then value will be picked from assembly.</param>
            <param name="copyrightUri">The application copyright Uri. Can be <c>null</c>.</param>
            <param name="description">The application description. Can be <c>null</c>. If <c>null</c> then value will be picked from assembly.</param>
            <param name="displayVersion">The application display version. Can be <c>null</c>. If <c>null</c> then value will be picked from assembly.</param>
            <param name="informationalVersion">The application informational version. Can be <c>null</c>. If <c>null</c> then value will be picked from assembly.</param>
            <param name="productName">The application product name. Can be <c>null</c>. If <c>null</c> then value will be picked from assembly.</param>
            <param name="name">The application title. Can be <c>null</c>. If <c>null</c> then value will be picked from assembly.</param>
            <param name="version">The application version. Can be <c>null</c>. If <c>null</c> then value will be picked from assembly.</param>
        </member>
        <member name="P:Orchestra.Models.AboutInfo.Assembly">
            <summary>
            Gets the assembly.
            </summary>
            <value>The assembly.</value>
        </member>
        <member name="P:Orchestra.Models.AboutInfo.AppIcon">
            <summary>
            Gets the application icon.
            </summary>
        </member>
        <member name="P:Orchestra.Models.AboutInfo.BuildDateTime">
            <summary>
            Gets the application build datetime.
            </summary>
        </member>
        <member name="P:Orchestra.Models.AboutInfo.CompanyLogoForSplashScreenUri">
            <summary>
            Gets the application logo image Uri.
            </summary>
            <value>The company logo image Uri.</value>
        </member>
        <member name="P:Orchestra.Models.AboutInfo.CompanyLogoUri">
            <summary>
            Gets the application logo image source.
            </summary>
            <value>The company logo image Uri.</value>
        </member>
        <member name="P:Orchestra.Models.AboutInfo.Company">
            <summary>
            Gets the application company.
            </summary>
        </member>
        <member name="P:Orchestra.Models.AboutInfo.Copyright">
            <summary>
            Gets the application copyright.
            </summary>
        </member>
        <member name="P:Orchestra.Models.AboutInfo.CopyrightUri">
            <summary>
            Gets the application copyright Uri.
            </summary>
        </member>
        <member name="P:Orchestra.Models.AboutInfo.Description">
            <summary>
            Gets the application description.
            </summary>
        </member>
        <member name="P:Orchestra.Models.AboutInfo.DisplayVersion">
            <summary>
            Gets the application display version.
            </summary>
        </member>
        <member name="P:Orchestra.Models.AboutInfo.InformationalVersion">
            <summary>
            Gets the application informational version.
            </summary>
        </member>
        <member name="P:Orchestra.Models.AboutInfo.LogoImageSource">
            <summary>
            Gets the application logo image source.
            </summary>
            <value>The logo image source.</value>
        </member>
        <member name="P:Orchestra.Models.AboutInfo.Name">
            <summary>
            Gets the application name.
            </summary>
        </member>
        <member name="P:Orchestra.Models.AboutInfo.ProductName">
            <summary>
            Gets the application product name.
            </summary>
        </member>
        <member name="P:Orchestra.Models.AboutInfo.ShowLogButton">
            <summary>
            Gets or sets a value indicating whether the about should show a log button.
            </summary>
            <value><c>true</c> if the log button should be shown; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Orchestra.Models.AboutInfo.UriInfo">
            <summary>
            Gets the application uri info.
            </summary>
            <value>The uri info.</value>
        </member>
        <member name="P:Orchestra.Models.AboutInfo.Version">
            <summary>
            Gets the application version.
            </summary>
        </member>
        <member name="M:Orchestra.Services.IAboutInfoService.GetAboutInfo">
            <summary>
            Returns the about info. If <c>null</c>, the shell will not show the about window.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Orchestra.Services.IRecentlyUsedItemsService.MaximumItemCount">
            <summary>
            Gets or sets the maximum item count.
            <para />
            The default value is <c>10</c>.
            </summary>
            <value>The maximum item count.</value>
        </member>
        <member name="P:Orchestra.Services.IRecentlyUsedItemsService.Items">
            <summary>
            Gets the recently used items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="P:Orchestra.Services.IRecentlyUsedItemsService.PinnedItems">
            <summary>
            Gets the pinned items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="M:Orchestra.Services.IRecentlyUsedItemsService.AddItem(Orchestra.Models.RecentlyUsedItem)">
            <summary>
            Adds the item to the list of recently used items.
            </summary>
            <param name="item">The item.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="item"/> is <c>null</c>.</exception>
        </member>
        <member name="E:Orchestra.Services.IRecentlyUsedItemsService.Updated">
            <summary>
            Occurs when the <see cref="P:Orchestra.Services.RecentlyUsedItemsService.Items"/> property has been updated.
            </summary>
        </member>
        <member name="M:Orchestra.Services.IRecentlyUsedItemsService.PinItem(System.String)">
            <summary>
            Pins the item with the specified name.
            </summary>
            <param name="name">The name.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="name"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Orchestra.Services.IRecentlyUsedItemsService.UnpinItem(System.String)">
            <summary>
            Unpins the item with the specified name.
            </summary>
            <param name="name">The name.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="name"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Orchestra.Services.IRecentlyUsedItemsService.RemoveItem(Orchestra.Models.RecentlyUsedItem)">
            <summary>
            Removes the item from the list of recently used items.
            </summary>
            <param name="item">The item.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="item"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Orchestra.Services.ISplashScreenService.CreateSplashScreen">
            <summary>
            Creates the splash screen.
            </summary>
            <returns>The window.</returns>
        </member>
        <member name="P:Orchestra.Services.RecentlyUsedItemsService.MaximumItemCount">
            <summary>
            Gets or sets the maximum item count.
            <para />
            The default value is <c>10</c>.
            </summary>
            <value>The maximum item count.</value>
        </member>
        <member name="P:Orchestra.Services.RecentlyUsedItemsService.Items">
            <summary>
            Gets the recently used items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="P:Orchestra.Services.RecentlyUsedItemsService.PinnedItems">
            <summary>
            Gets the pinned items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="E:Orchestra.Services.RecentlyUsedItemsService.Updated">
            <summary>
            Occurs when the <see cref="P:Orchestra.Services.RecentlyUsedItemsService.Items"/> property has been updated.
            </summary>
        </member>
        <member name="M:Orchestra.Services.RecentlyUsedItemsService.AddItem(Orchestra.Models.RecentlyUsedItem)">
            <summary>
            Adds the item to the list of recently used items.
            </summary>
            <param name="item">The item.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="item"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Orchestra.Services.RecentlyUsedItemsService.RemoveItem(Orchestra.Models.RecentlyUsedItem)">
            <summary>
            Removes the item from the list of recently used items.
            </summary>
            <param name="item">The item.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="item"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Orchestra.Services.RecentlyUsedItemsService.PinItem(System.String)">
            <summary>
            Pins the item with the specified name.
            </summary>
            <param name="name">The name.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="name"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Orchestra.Services.RecentlyUsedItemsService.UnpinItem(System.String)">
            <summary>
            Unpins the item with the specified name.
            </summary>
            <param name="name">The name.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="name"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Orchestra.Services.SplashScreenService.CreateSplashScreen">
            <summary>
            Creates the splash screen.
            </summary>
            <returns>The window.</returns>
        </member>
        <member name="T:Orchestra.ViewModels.KeyboardMappingsOverviewViewModel">
            <summary>
            View model for keyboard mappings overview.
            </summary>
        </member>
        <member name="P:Orchestra.ViewModels.KeyboardMappingsOverviewViewModel.KeyboardMappings">
            <summary>
            Gets the keyboard mappings.
            </summary>
            <value>The keyboard mappings.</value>
        </member>
        <member name="P:Orchestra.ViewModels.KeyboardMappingsOverviewViewModel.Print">
            <summary>
            Gets the Print command.
            </summary>
        </member>
        <member name="M:Orchestra.ViewModels.KeyboardMappingsOverviewViewModel.OnPrintExecute">
            <summary>
            Method to invoke when the Print command is executed.
            </summary>
        </member>
        <member name="P:Orchestra.ViewModels.KeyboardMappingsOverviewViewModel.Customize">
            <summary>
            Gets the Customize command.
            </summary>
        </member>
        <member name="M:Orchestra.ViewModels.KeyboardMappingsOverviewViewModel.OnCustomizeExecuteAsync">
            <summary>
            Method to invoke when the Customize command is executed.
            </summary>
        </member>
        <member name="T:Orchestra.ViewModels.SplashScreenViewModel">
            <summary>
            The splash screen view model.
            </summary>
        </member>
        <member name="T:Orchestra.Views.AboutWindow">
            <summary>
            Interaction logic for AboutWindow.xaml.
            </summary>
            <summary>
            AboutWindow
            </summary>
        </member>
        <member name="M:Orchestra.Views.AboutWindow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orchestra.Views.AboutWindow"/> class.
            </summary>
        </member>
        <member name="M:Orchestra.Views.AboutWindow.#ctor(Orchestra.ViewModels.AboutViewModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Orchestra.Views.AboutWindow"/> class.
            </summary>
            <param name="viewModel">The view model to inject.</param>
            <remarks>
            This constructor can be used to use view-model injection.
            </remarks>
        </member>
        <member name="M:Orchestra.Views.AboutWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Orchestra.Views.CrashWarningWindow">
            <summary>
            CrashWarningWindow
            </summary>
        </member>
        <member name="M:Orchestra.Views.CrashWarningWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Orchestra.Views.KeyboardMappingsCustomizationView">
            <summary>
            Interaction logic for KeyboardMappingsView.xaml.
            </summary>
            <summary>
            KeyboardMappingsCustomizationView
            </summary>
        </member>
        <member name="M:Orchestra.Views.KeyboardMappingsCustomizationView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orchestra.Views.KeyboardMappingsCustomizationView"/> class.
            </summary>
        </member>
        <member name="M:Orchestra.Views.KeyboardMappingsCustomizationView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Orchestra.Views.KeyboardMappingsCustomizationWindow">
            <summary>
            Interaction logic for KeyboardMappingsWindow.xaml.
            </summary>
            <summary>
            KeyboardMappingsCustomizationWindow
            </summary>
        </member>
        <member name="M:Orchestra.Views.KeyboardMappingsCustomizationWindow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orchestra.Views.KeyboardMappingsCustomizationWindow"/> class.
            </summary>
        </member>
        <member name="M:Orchestra.Views.KeyboardMappingsCustomizationWindow.#ctor(Orchestra.ViewModels.KeyboardMappingsCustomizationViewModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Orchestra.Views.KeyboardMappingsCustomizationWindow"/> class.
            </summary>
            <param name="viewModel">The view model to inject.</param>
            <remarks>
            This constructor can be used to use view-model injection.
            </remarks>
        </member>
        <member name="M:Orchestra.Views.KeyboardMappingsCustomizationWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Orchestra.Views.KeyboardMappingsOverviewView">
            <summary>
            Interaction logic for KeyboardMappingsOverviewView.xaml.
            </summary>
            <summary>
            KeyboardMappingsOverviewView
            </summary>
        </member>
        <member name="M:Orchestra.Views.KeyboardMappingsOverviewView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orchestra.Views.KeyboardMappingsOverviewView"/> class.
            </summary>
        </member>
        <member name="M:Orchestra.Views.KeyboardMappingsOverviewView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Orchestra.Views.KeyboardMappingsOverviewWindow">
            <summary>
            Interaction logic for KeyboardMappingsOverviewWindow.xaml.
            </summary>
            <summary>
            KeyboardMappingsOverviewWindow
            </summary>
        </member>
        <member name="M:Orchestra.Views.KeyboardMappingsOverviewWindow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orchestra.Views.KeyboardMappingsOverviewWindow"/> class.
            </summary>
        </member>
        <member name="M:Orchestra.Views.KeyboardMappingsOverviewWindow.#ctor(Orchestra.ViewModels.KeyboardMappingsOverviewViewModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Orchestra.Views.KeyboardMappingsOverviewWindow"/> class.
            </summary>
            <param name="viewModel">The view model to inject.</param>
            <remarks>
            This constructor can be used to use view-model injection.
            </remarks>
        </member>
        <member name="M:Orchestra.Views.KeyboardMappingsOverviewWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Orchestra.Views.MessageBoxWindow">
            <summary>
            MessageBoxWindow
            </summary>
        </member>
        <member name="M:Orchestra.Views.MessageBoxWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Orchestra.Views.SplashScreen">
            <summary>
            Interaction logic for SplashScreen.xaml
            </summary>
            <summary>
            SplashScreen
            </summary>
        </member>
        <member name="M:Orchestra.Views.SplashScreen.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orchestra.Views.SplashScreen" /> class.
            </summary>
        </member>
        <member name="M:Orchestra.Views.SplashScreen.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Orchestra.Views.SystemInfoWindow">
            <summary>
            Interaction logic for SystemInfoWindow.xaml.
            </summary>
            <summary>
            SystemInfoWindow
            </summary>
        </member>
        <member name="M:Orchestra.Views.SystemInfoWindow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orchestra.Views.SystemInfoWindow"/> class.
            </summary>
        </member>
        <member name="M:Orchestra.Views.SystemInfoWindow.#ctor(Orchestra.ViewModels.SystemInfoViewModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Orchestra.Views.SystemInfoWindow"/> class.
            </summary>
            <param name="viewModel">The view model to inject.</param>
            <remarks>
            This constructor can be used to use view-model injection.
            </remarks>
        </member>
        <member name="M:Orchestra.Views.SystemInfoWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Orchestra.Windows.WindowExtensions">
            <summary>
            Window extensions class.
            </summary>
        </member>
        <member name="M:Orchestra.Windows.WindowExtensions.ApplyApplicationIcon(System.Windows.Window)">
            <summary>
            Applies the application icon to the specified window.
            </summary>
            <param name="window">The window.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="window"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Orchestra.Windows.FixMaximize">
            <summary>
            Attachable properties to fix the maximized state of a window.
            <para />
            The code comes from http://connect.microsoft.com/VisualStudio/feedback/details/775972/wpf-ribbon-window-the-border-is-too-thin.
            </summary>
        </member>
        <member name="T:Orchestra.Windows.Taskbar">
            <summary>
            Class Taskbar. This class cannot be inherited.
            </summary>
            <remarks>
            This code comes from http://winsharp93.wordpress.com/2009/06/29/find-out-size-and-position-of-the-taskbar/.
            </remarks>
        </member>
        <member name="T:MethodTimeLogger">
            <summary>
            Note: do not rename this class or put it inside a namespace.
            </summary>
        </member>
        <member name="T:ModuleInitializer">
            <summary>
            Used by the ModuleInit. All code inside the Initialize method is ran as soon as the assembly is loaded.
            </summary>
        </member>
        <member name="M:ModuleInitializer.Initialize">
            <summary>
            Initializes the module.
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
